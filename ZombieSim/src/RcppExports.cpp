// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generateParameterSamples
arma::mat generateParameterSamples(int numParticles, int numParams, arma::vec priorMin, arma::vec priorMax);
RcppExport SEXP _ZombieSim_generateParameterSamples(SEXP numParticlesSEXP, SEXP numParamsSEXP, SEXP priorMinSEXP, SEXP priorMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numParticles(numParticlesSEXP);
    Rcpp::traits::input_parameter< int >::type numParams(numParamsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type priorMin(priorMinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type priorMax(priorMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(generateParameterSamples(numParticles, numParams, priorMin, priorMax));
    return rcpp_result_gen;
END_RCPP
}
// generateSimulatedData
arma::cube generateSimulatedData(const arma::mat& parameters, int numTimePoints, const arma::vec& starting);
RcppExport SEXP _ZombieSim_generateSimulatedData(SEXP parametersSEXP, SEXP numTimePointsSEXP, SEXP startingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type numTimePoints(numTimePointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type starting(startingSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSimulatedData(parameters, numTimePoints, starting));
    return rcpp_result_gen;
END_RCPP
}
// computeSummaryStatistics
arma::mat computeSummaryStatistics(const arma::cube& simulatedData);
RcppExport SEXP _ZombieSim_computeSummaryStatistics(SEXP simulatedDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type simulatedData(simulatedDataSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSummaryStatistics(simulatedData));
    return rcpp_result_gen;
END_RCPP
}
// calculateDistance
arma::mat calculateDistance(const arma::mat& observedData, const arma::cube& simulatedData);
RcppExport SEXP _ZombieSim_calculateDistance(SEXP observedDataSEXP, SEXP simulatedDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type observedData(observedDataSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type simulatedData(simulatedDataSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDistance(observedData, simulatedData));
    return rcpp_result_gen;
END_RCPP
}
// acceptRejectAndUpdate
Rcpp::List acceptRejectAndUpdate(const arma::mat& parameterSamples, const arma::mat& distances, double tolerance);
RcppExport SEXP _ZombieSim_acceptRejectAndUpdate(SEXP parameterSamplesSEXP, SEXP distancesSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type parameterSamples(parameterSamplesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(acceptRejectAndUpdate(parameterSamples, distances, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// acceptReject
arma::mat acceptReject(const arma::mat& parameterSamples, const arma::mat& distances, double tolerance);
RcppExport SEXP _ZombieSim_acceptReject(SEXP parameterSamplesSEXP, SEXP distancesSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type parameterSamples(parameterSamplesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(acceptReject(parameterSamples, distances, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// estimatePosterior
arma::mat estimatePosterior(const arma::mat& acceptedSamples, const arma::vec& weights);
RcppExport SEXP _ZombieSim_estimatePosterior(SEXP acceptedSamplesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type acceptedSamples(acceptedSamplesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(estimatePosterior(acceptedSamples, weights));
    return rcpp_result_gen;
END_RCPP
}
// abcRej
arma::mat abcRej(const arma::mat& observedData, const int numParticles, const double epsilon, const arma::vec& priorMin, const arma::vec& priorMax);
RcppExport SEXP _ZombieSim_abcRej(SEXP observedDataSEXP, SEXP numParticlesSEXP, SEXP epsilonSEXP, SEXP priorMinSEXP, SEXP priorMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type observedData(observedDataSEXP);
    Rcpp::traits::input_parameter< const int >::type numParticles(numParticlesSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorMin(priorMinSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorMax(priorMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(abcRej(observedData, numParticles, epsilon, priorMin, priorMax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ZombieSim_generateParameterSamples", (DL_FUNC) &_ZombieSim_generateParameterSamples, 4},
    {"_ZombieSim_generateSimulatedData", (DL_FUNC) &_ZombieSim_generateSimulatedData, 3},
    {"_ZombieSim_computeSummaryStatistics", (DL_FUNC) &_ZombieSim_computeSummaryStatistics, 1},
    {"_ZombieSim_calculateDistance", (DL_FUNC) &_ZombieSim_calculateDistance, 2},
    {"_ZombieSim_acceptRejectAndUpdate", (DL_FUNC) &_ZombieSim_acceptRejectAndUpdate, 3},
    {"_ZombieSim_acceptReject", (DL_FUNC) &_ZombieSim_acceptReject, 3},
    {"_ZombieSim_estimatePosterior", (DL_FUNC) &_ZombieSim_estimatePosterior, 2},
    {"_ZombieSim_abcRej", (DL_FUNC) &_ZombieSim_abcRej, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ZombieSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
